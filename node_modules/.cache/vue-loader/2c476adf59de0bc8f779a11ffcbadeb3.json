{"remainingRequest":"/Users/jiwon/test/matching-frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiwon/test/matching-frontend/src/components/ChatRoom/index.vue?vue&type=style&index=0&id=e6925974&scoped=true&lang=css&","dependencies":[{"path":"/Users/jiwon/test/matching-frontend/src/components/ChatRoom/index.vue","mtime":1660723902423},{"path":"/Users/jiwon/test/matching-frontend/node_modules/css-loader/dist/cjs.js","mtime":1660264748105},{"path":"/Users/jiwon/test/matching-frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660264748190},{"path":"/Users/jiwon/test/matching-frontend/node_modules/postcss-loader/src/index.js","mtime":1660264748183},{"path":"/Users/jiwon/test/matching-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1660264744188},{"path":"/Users/jiwon/test/matching-frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1660264748190}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci53cmFwcGVyIHsKICB3aWR0aDogMTAwdnc7CiAgaGVpZ2h0OiAxMDAlOwogIG92ZXJmbG93OiBoaWRkZW47Cn0KCm1haW4gewogIGhlaWdodDogY2FsYygxMDAlIC0gNThweCk7CiAgb3ZlcmZsb3cteTogc2Nyb2xsOwp9CgoubWVzc2FnZS13cmFwcGVyIHsKICB3aWR0aDogOTAlOwogIG1hcmdpbjogMCBhdXRvOwp9CgoubWVzc2FnZXMgewogIGhlaWdodDogY2FsYygxMDAlIC0gMTI2cHgpOwp9CgpoMSB7CiAgbWFyZ2luOiA3cHggMDsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA2IA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/ChatRoom","sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <ChatRoomMyProfile :user=\"receiver\" />\n    <main>\n      <div class=\"messages\">\n        <div\n          class=\"message-wrapper\"\n          v-for=\"message in this.messages\"\n          :key=\"message.messageId\"\n        >\n          <ChatRoomDateDivider\n            v-if=\"\n              message.messageId === 0 ||\n              messages[message.messageId - 1].createdDate.slice(0, 8) !==\n                message.createdDate.slice(0, 8)\n            \"\n            :date=\"message.createdDate\"\n          />\n          <div class=\"box-wrapper\">\n            <ChatRoomMessageBox\n              :message=\"message\"\n              :onLeft=\"message.userId === receiver.userId\"\n            />\n            <!-- <ChatRoomTimeIndicator :date=\"message.createdDate\" /> -->\n          </div>\n        </div>\n      </div>\n      <ChatRoomMessageInput @sentMessageContent=\"addSentMessage\" />\n    </main>\n  </div>\n</template>\n\n<script>\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\nimport dayjs from \"dayjs\";\n\nimport { fetchPackUserAndMyData } from \"./_worker/user\";\nimport { useAppStore } from \"@/store/userState\";\nimport ChatRoomMyProfile from \"./_components/ChatRoomMyProfile.vue\";\nimport ChatRoomDateDivider from \"./_components/ChatRoomDateDivider.vue\";\nimport ChatRoomMessageBox from \"./_components/ChatRoomMessageBox.vue\";\nimport ChatRoomMessageInput from \"./_components/ChatRoomMessageInput.vue\";\n\nexport default {\n  name: \"ChatRoom\",\n  setup() {\n    const store = useAppStore();\n    return { store };\n  },\n  data() {\n    return {\n      // dummyTurn: 0,\n      // dummyId: prevData.length,\n      messages: [],\n      user: {},\n      receiver: {},\n      showMore: false,\n    };\n  },\n  mounted() {\n    this.prepareUser({ userId: \"user5\", receiverId: \"user131\" });\n  },\n  created() {\n    this.connectSocket();\n  },\n  watch: {\n    user() {\n      console.log(this.user);\n      return null;\n    },\n  },\n  components: {\n    ChatRoomMyProfile,\n    ChatRoomMessageBox,\n    ChatRoomDateDivider,\n    ChatRoomMessageInput,\n  },\n  methods: {\n    async prepareUser({ userId, receiverId }) {\n      this.user = await fetchPackUserAndMyData(userId);\n      this.receiver = await fetchPackUserAndMyData(receiverId);\n      console.log(this.user.user.userId, this.receiver.user.userId);\n    },\n    addSentMessage(sentMessageContent) {\n      const { userId } = this.user.user;\n      const matchId = 15;\n      const message = {\n        matchId,\n        userId,\n        content: sentMessageContent,\n        createdDate: dayjs().format(\"YYYYMMDDHHmmss\"),\n      };\n\n      this.messages.push({\n        ...message,\n        messageId: this.messages ? this.messages.length : 0,\n      });\n      this.stompClient.send(\n        `/app/chat.sendMessage/${matchId}`,\n        JSON.stringify(message),\n        {},\n      );\n    },\n    connectSocket() {\n      const CHAT_TARGET =\n        \"http://matching.169.56.100.104.nip.io/websocket-server/ws\";\n      const matchId = 1;\n\n      const chatSocket = new SockJS(CHAT_TARGET);\n\n      this.stompClient = Stomp.over(chatSocket);\n\n      console.log(CHAT_TARGET);\n\n      this.stompClient.connect(\n        {},\n        () => {\n          this.connected = true;\n\n          this.stompClient.subscribe(`/topic/${matchId}`, (res) => {\n            const receivedMessage = JSON.parse(res.body);\n            console.log(receivedMessage);\n            if (receivedMessage.userId !== user.userId) {\n              this.messages.push(receivedMessage);\n            }\n          });\n        },\n        () => {\n          console.log(\"FAILED\");\n          this.connected = false;\n        },\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n.wrapper {\n  width: 100vw;\n  height: 100%;\n  overflow: hidden;\n}\n\nmain {\n  height: calc(100% - 58px);\n  overflow-y: scroll;\n}\n\n.message-wrapper {\n  width: 90%;\n  margin: 0 auto;\n}\n\n.messages {\n  height: calc(100% - 126px);\n}\n\nh1 {\n  margin: 7px 0;\n}\n</style>\n"]}]}